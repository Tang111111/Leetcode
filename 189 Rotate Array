//我的解法 但题目要求是O（1）所以不行
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if(k<=0)
            return;
        int n=nums.size();
        for(int i=0;i<k;i++)
        {
            int number=nums[n-1];
            shiftVector(nums);
            nums[0]=number;
        }
        
    }
    void shiftVector(vector<int>& nums){
        int n=nums.size();
        for(int i=n-1;i>=1;i--)
        {
            nums[i]=nums[i-1];
        }
    }
};

//翻转数组三步法
(1 2 3 4) 5 6 7    //反转前n-k个  reverse(nums.begin(), nums.begin() + n - k);
4 3 2 1 (5 6 7)    //反转后k个    reverse(nums.begin() + n - k, nums.end());
(4 3 2 1 7 6 5)    //反转整个数组  reverse(nums.begin(), nums.end());
5 6 7 1 2 3 4

class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if (nums.empty() || (k %= nums.size()) == 0) return;
        int n = nums.size();
        reverse(nums.begin(), nums.begin() + n - k);
        reverse(nums.begin() + n - k, nums.end());
        reverse(nums.begin(), nums.end());
    }
};

//解法三
//旋转数组的操作也可以看做从数组的末尾取k个数组放入数组的开头
class Solution {
public:
    void rotate(vector<int>& nums, int k) {
        if (nums.empty() || (k %= nums.size()) == 0) return;
        int n = nums.size();
        for (int i = 0; i < n - k; ++i) {
            nums.push_back(nums[0]);
            nums.erase(nums.begin());
        }
    }
};
